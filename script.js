const board = document.getElementById('board'); // parent div for canvas and video
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const clear = document.getElementById('clear'); // clear button
const strokeWidth = document.getElementById('strokeWidth'); // input type range
const strokeStyleColor = document.getElementById('strokeStyleColor'); // input type color 
const canvasBackgroundColor = document.getElementById('canvasBackgroundColor'); // input type color 
const eraser = document.getElementById('eraser'); // eraser checkbox
const view = document.getElementById('view'); // select tag for normal whiteboard or camboard
const video = document.getElementById('video'); // new video element for catching cam feed

ctx.lineWidth = 10;
ctx.linecap = 'round';
ctx.strokeStyle = '#000';

let isDrawing = false;
let lastX = 0;
let lastY = 0;
let isErasing = false;
const eraserSize = 20;

let eraserButtonClicked = false;

let camOn = false;
let listener; // for the detectHands func which is called evey 40 millisec
let model; // handpose model by tensorflow

// cursor is clicked on canvas
canvas.addEventListener('mousedown', (event) => {
    // if(!eraserButtonClicked) {
    //     isDrawing = true;
    //     isErasing = false;
    // } else {
    //     isDrawing = false;
    //     isErasing = true;
    // }
    if(!flag) {
        startdraw(event.offsetX, event.offsetY)
    }
})

function startdraw(offsetX, offsetY) {
    if(!eraserButtonClicked) {
        isDrawing = true;
        isErasing = false;
    } else {
        isDrawing = false;
        isErasing = true;
    }
    lastX = offsetX;
    lastY = offsetY;
}

// cursor is moving on canvas
canvas.addEventListener('mousemove', (event) => {
    // after i added this if staement i can't draw with mouse cam on which is prob as mouse draws better than gesture think about this
    // later to keep of discard this and then alert user to keep canvas and mouse away when cam on
    if(!flag) { // if cam is on seize the mousemove work
        drawing(event.offsetX, event.offsetY)
    }
})

function drawing (offsetX, offsetY) {
    if(isDrawing && !isErasing) {
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(offsetX, offsetY);
        ctx.stroke();
        // update our locations
        lastX = offsetX;
        lastY = offsetY;
    } else if(!isDrawing && isErasing) {
        ctx.clearRect(parseInt(offsetX)-eraserSize, parseInt(offsetY)-eraserSize, eraserSize, eraserSize)
        // first 2 param is changed to make the eraser on top of cursor
    }
}

// cursor is released from clicked state
canvas.addEventListener('mouseup', () => {
        isDrawing = false;
        isErasing = false;
    
})

// cursor left the canvas
canvas.addEventListener('mouseleave', () => {
        isDrawing = false;
        isErasing = false;
    
})

// clear whole screen
clear.addEventListener('click', (event) => {
    event.preventDefault();
    ctx.clearRect(0, 0, canvas.clientHeight, canvas.clientWidth);
})

// changing stroke width
strokeWidth.addEventListener('change', () => {
    ctx.lineWidth = strokeWidth.value
})

// changing color of brush
strokeStyleColor.addEventListener('change', () => {
    ctx.strokeStyle = strokeStyleColor.value
})

// changing color of canvas background
canvasBackgroundColor.addEventListener('change', () => {
    board.style.backgroundColor = canvasBackgroundColor.value
})

// eraser button clicked
eraser.addEventListener('click', () => {
    eraserButtonClicked = eraserButtonClicked ? false : true;
})

const videoStream = () => {
    navigator.mediaDevices.getUserMedia({ // getUserMedia is a API and takes an object as an argument 
        video: {width: 600, height: 600},
        audio: false // make it true if u also want audio
    })
    .then((stream) => { // and this returns a stream object which is a media stream object
        video.srcObject = stream // video source is stream
    })
}
let flag = 0, firsttime = 0;
const detectHands = async () => { // this is function is asynchronus
    const prediction = await model.estimateHands(video, false) // 1st arg is input, 2nd is if we want to return tensor or not So her we dont want tensor we want actual values of coordinates
    if(!prediction.length) {
        flag=0;
        firsttime=0;
        // ig isdrawign false here
    }
    //  ctx.drawImage(video, 0, 0, 600, 600) // dont print it to canvas

    prediction.forEach(pred => { // pred corresponds to 1 face
        if(!flag) {
            firsttime =1;
        }
        flag=1;
        console.log(pred.landmarks)
        if(firsttime && flag) {
            startdraw(pred.landmarks[8][0], pred.landmarks[8][1]);
            firsttime =0;
        } else if(flag && !firsttime) {
            drawing(pred.landmarks[8][0], pred.landmarks[8][1]);
        }
        if(pred.landmarks[0][1]-pred.landmarks[12][1] < 100) { // if diff b/w y coordinates of middle finger tip and bottom of palm is < 100 (fist) then clear whole board
            ctx.clearRect(0, 0, canvas.clientHeight, canvas.clientWidth);
        }
        // added if(!flag) statements check above issue is after prediction while mouse moving it also creqtes draw so stop it will predictiin getting then u can click drag do something lke that
    })

    
}

// changing to camera mode
view.addEventListener('change', () => {
    if(!camOn) { // turn cam on
        videoStream();
    } else { // turn cam off
        // goal : close the getUserMedia cam feed and end the set interval from eventlistenr of model and video
        clearInterval(listener);
        const stream = video.srcObject; // A video's MediaStream object is available through its srcObject attribute
        const tracks = stream.getTracks(); // Through the MediaStream, you can get the MediaStreamTracks with getTracks():
        tracks[0].stop(); // Tracks are returned as an array, so if you know you only have one, you can stop it with: 
        // tracks.forEach(track => track.stop()) // Or stop all like so:
    }
    camOn = view.value === 'CamBoard' ? true : false;
})

// when video data is loaded fire up the model and start the listener
video.addEventListener('loadeddata', async () =>{ // After the data is loaded then canvas is called, else it will not show
    model = await handpose.load()
    listener = setInterval(detectHands, 40) // 1000/24frames = 40
})

/*
    Te understand the co-ordinates of hand see the pic on https://github.com/tensorflow/tfjs-models/tree/master/hand-pose-detection
    So the numbers(indexes) which we will see are the numbers of finger tips : 
    4 : thumb finger tip
    8 : index finger tip
    12 : middle finger tip
    16 : ring finger tip
    20 : pinky finger tip
*/

/*

[Log] Array (1) (script.js, line 116)
0 Object

annotations: Object

indexFinger: [[223.4688586042233, 212.61371575433952, -7.137505054473877], [256.3225909762025, 142.11153687828613, -11.19483470916748], [273.9958149127247, 90.76267505948397, -14.937398910522461], [286.4970212068328, 46.1254959798697, -18.086450576782227]] (4)

middleFinger: [[169.19900271073146, 194.95040381229765, -7.318049430847168], [192.1598736066121, 112.76238541126212, -11.496121406555176], [207.84388107762845, 52.411517766725, -16.81114387512207], [218.27595662264932, 7.156082124117461, -20.53110122680664]] (4)

palmBase: [[106.43913383670123, 402.7902977617439, -0.0009088665246963501]] (1)

pinky: [[58.33044533366913, 216.37825901708334, -13.278898239135742], [51.42046369378508, 152.77792422840557, -18.01321792602539], [49.5075439733308, 105.64789151062294, -21.187686920166016], [49.9764186363968, 61.617547117683074, -23.30341148376465]] (4)

ringFinger: [[115.51304880076617, 197.13181147325582, -9.524481773376465], [126.9986512604001, 117.9404054346869, -13.990391731262207], [138.8515477435538, 59.39256307081665, -18.02753448486328], [148.37891365715558, 15.788776182592443, -20.683996200561523]] (4)

thumb: [[184.91906467681278, 397.79733282939844, -11.88065242767334], [258.33079455981914, 349.3753442248492, -18.013696670532227], [315.191640754339, 302.39428831958566, -23.93886375427246], [367.4924182456018, 267.27430861321193, -29.64517593383789]] (4)

Object Prototype

boundingBox: {topLeft: [-117.89824679157547, -160.98845952187372], bottomRight: [534.898209010508, 491.8079962802098]}

handInViewConfidence: 0.9989660978317261

landmarks: [[106.43913383670123, 402.7902977617439, -0.0009088665246963501], [184.91906467681278, 397.79733282939844, -11.88065242767334], [258.33079455981914, 349.3753442248492, -18.013696670532227], [315.191640754339, 302.39428831958566, -23.93886375427246], [367.4924182456018, 267.27430861321193, -29.64517593383789], [223.4688586042233, 212.61371575433952, -7.137505054473877], [256.3225909762025, 142.11153687828613, -11.19483470916748], [273.9958149127247, 90.76267505948397, -14.937398910522461], [286.4970212068328, 46.1254959798697, -18.086450576782227], [169.19900271073146, 194.95040381229765, -7.318049430847168], â€¦] (21)

*/
/*

[Log] Array (21) (script.js, line 120)
0 [526.6530171180577, 322.22399593725595, -0.0012617632746696472] (3)
1 [464.890214389178, 331.8585937566602, -8.491442680358887] (3)
2 [409.96871862362195, 305.51942743763607, -12.898971557617188] (3)
3 [369.9767099879263, 267.8644936096796, -16.8640079498291] (3)
4 [340.1744452215302, 237.17510712545192, -20.957616806030273] (3)
5 [414.9229297123817, 222.16609170546883, -7.506957054138184] (3)
6 [377.59074767804407, 167.1008617521658, -9.94023609161377] (3)
7 [355.85869059212973, 127.27897222433934, -11.632222175598145] (3)
8 [339.03577175398925, 94.3229673225353, -13.045589447021484] (3)
9 [453.2274599404963, 199.02538310592823, -7.272463798522949] (3)
10 [418.3067083635229, 134.35996896723364, -9.12356948852539] (3)
11 [395.2703034400824, 85.87639015108472, -11.813109397888184] (3)
12 [377.2407274400944, 48.76137700731586, -14.081238746643066] (3)
13 [492.38853189604964, 188.8561492043969, -8.102602005004883] (3)
14 [469.8183677210006, 126.53791536862525, -11.4065580368042] (3)
15 [454.38297898766166, 81.32616702174931, -15.42464828491211] (3)
16 [441.2312871428147, 47.86631713574883, -18.245723724365234] (3)
17 [531.0414664917339, 189.2890720313466, -9.704726219177246] (3)
18 [523.9684219149403, 138.51781980261032, -13.71508502960205] (3)
19 [518.0209904528886, 103.30488074892037, -17.007205963134766] (3)
20 [510.24755113469473, 72.2422632750798, -19.076364517211914] (3)

Array Prototype
*/

/*
[Log] Array (21) (script.js, line 119)
0 [93.50210321985364, 452.291905190942, -0.00093860924243927] (3)
1 [152.8054651741498, 436.13060805510383, -13.832710266113281] (3)
2 [196.46562016343228, 392.0478385760424, -21.980384826660156] (3)
3 [204.16522339271867, 350.8329984796878, -29.427629470825195] (3)
4 [173.110599157124, 308.504637357241, -36.521671295166016] (3)
5 [180.731858618533, 251.48059203877347, -9.282155990600586] (3)
6 [194.0837981967499, 205.56721343624102, -20.04875946044922] (3)
7 [177.28485361786767, 232.82350593222145, -30.61172103881836] (3)
8 [160.58252302241394, 260.30397608071536, -36.0169563293457] (3)
9 [134.3338464173148, 230.00249798547847, -7.956818103790283] (3)
10 [149.849547813804, 140.77398396076552, -12.862072944641113] (3)
11 [155.92496122059669, 73.11764076009094, -19.381343841552734] (3)
12 [162.45658122372743, 10.90203975533143, -23.350173950195312] (3)
13 [87.39317897637852, 234.7574563579244, -8.637805938720703] (3)
14 [89.98682947701755, 151.5029196583282, -13.206441879272461] (3)
15 [88.19835556405395, 82.00608954783407, -17.23137664794922] (3)
16 [88.61203259879962, 18.17646826727372, -19.07305908203125] (3)
17 [38.59692588538499, 265.0896811103644, -11.153047561645508] (3)
18 [26.481829702780615, 202.12229971643222, -14.389613151550293] (3)
19 [16.641635566910068, 152.65540228621362, -16.111337661743164] (3)
20 [9.826036895078161, 99.57560002458466, -16.385009765625] (3)

Array Prototype

*/



// [Log] Array (21) (script.js, line 135)
// 0 [465.2697935269574, 373.8180111443928, -0.0007522255182266235] (3)
// 1 [397.1035360550399, 355.79558841622224, -4.797519683837891] (3)
// 2 [340.1587630244807, 316.3792578157004, -6.3595805168151855] (3)
// 3 [297.360624903987, 276.6572134555914, -8.784703254699707] (3)
// 4 [265.0512911163154, 249.37845980157414, -11.396746635437012] (3)
// 5 [357.76431668826183, 227.09379924258508, 4.561474323272705] (3)
// 6 [326.2522545189534, 177.32709766031817, 4.708460807800293] (3)
// 7 [305.7597712790987, 142.6391311167311, 2.8480894565582275] (3)
// 8 [289.40519767777334, 113.53208103433306, 0.4347255229949951] (3)
// 9 [394.5964266999028, 207.08126871295394, 2.8530235290527344] (3)
// 10 [370.3569444415542, 145.61887627299237, 4.305050849914551] (3)
// 11 [352.07582654607745, 103.28268717686153, 1.9519610404968262] (3)
// 12 [337.9620922322018, 72.2544784833446, -0.34066057205200195] (3)
// 13 [431.79516917160004, 203.2474475217186, -0.5341260433197021] (3)
// 14 [418.79883640687046, 144.401608635186, -1.1126694679260254] (3)
// 15 [407.7760399247541, 105.73478030424371, -3.91121506690979] (3)
// 16 [397.20527107515136, 77.23629714846729, -6.069680213928223] (3)
// 17 [470.9756014205416, 213.28260859593888, -4.957513809204102] (3)
// 18 [470.40284239962773, 167.28610770724353, -7.179409980773926] (3)
// 19 [469.0951309908742, 136.29184303068956, -9.324596405029297] (3)
// 20 [465.7170809165876, 107.29396268424824, -10.740342140197754] (3)

// Array Prototype



// [Log] Array (21) (script.js, line 134) // mutti
// 0 [164.22402262459573, 371.3236829892388, -0.0011328160762786865] (3)
// 1 [212.18296780575156, 370.7779351442208, -23.897951126098633] (3)
// 2 [255.71972210221796, 334.6816437880053, -35.08864212036133] (3)
// 3 [256.7711654295004, 291.2750758868034, -43.72523498535156] (3)
// 4 [230.8427163526255, 274.0615608601141, -51.422691345214844] (3)
// 5 [240.56124383166295, 273.81145304038847, -15.478925704956055] (3)
// 6 [257.60026780882794, 243.68518346642853, -45.169864654541016] (3)
// 7 [251.4680379045339, 275.5405264319089, -59.019344329833984] (3)
// 8 [244.6576821004292, 296.88118453112514, -55.98567581176758] (3)
// 9 [206.47534069705335, 263.36140148333044, -13.10701847076416] (3)
// 10 [220.1105488635021, 242.59771128673918, -42.20711135864258] (3)
// 11 [214.21807159598092, 286.46156160417405, -50.98280334472656] (3)
// 12 [210.70565922809254, 300.95791745958564, -44.10186004638672] (3)
// 13 [171.8751578836743, 261.6283922321152, -14.987420082092285] (3)
// 14 [181.39994295294156, 248.37174111278046, -43.596954345703125] (3)
// 15 [180.702609900939, 293.1865225693614, -49.23109817504883] (3)
// 16 [177.31410806362913, 306.0352071187525, -42.78600311279297] (3)
// 17 [136.45674177399957, 268.28511705960995, -18.34308624267578] (3)
// 18 [148.77090427980224, 260.6012476064429, -41.925132751464844] (3)
// 19 [153.87024481962072, 294.0529902514526, -44.04511260986328] (3)
// 20 [151.12721539578686, 306.07140250442404, -37.6751594543457] (3)

// Array Prototype


// Array Prototype


// // for fist u can see 0,0 is same as 20,0
/*

[Log] Array (21) (script.js, line 135) // mutti
0 [200.28173958099296, 350.82658905678073, -0.0008409470319747925] (3)
1 [258.60249798053337, 341.7513446127476, -20.70664405822754] (3)
2 [304.2732885084764, 296.89833670440163, -29.736961364746094] (3)
3 [300.5285003287389, 252.49776002922542, -37.199058532714844] (3)
4 [266.0657964479266, 240.14173556953781, -45.3695182800293] (3)
5 [271.23540836018765, 233.31874741672988, -7.583070755004883] (3)
6 [280.7436353619887, 192.88199579751074, -38.39419937133789] (3)
7 [275.3317105046239, 230.36516891769384, -54.51640319824219] (3)
8 [267.8463872735068, 252.50543824561936, -51.35939407348633] (3)
9 [232.75540136854573, 224.99642710992558, -5.87177038192749] (3)
10 [239.0768277637761, 191.0355888314238, -36.27136993408203] (3)
11 [238.33795330072192, 243.36867783109935, -47.84632110595703] (3)
12 [236.24871355382575, 263.7997560131368, -40.99288558959961] (3)
13 [193.8814279759485, 225.9148879980243, -8.344063758850098] (3)
14 [197.15733180800123, 197.17016664268237, -38.06121063232422] (3)
15 [203.92656507377902, 248.79466704800615, -45.99138641357422] (3)
16 [203.58098344121987, 268.941796930318, -39.460628509521484] (3)
17 [153.76019767065202, 235.34074345047782, -11.758901596069336] (3)
18 [160.54642351150687, 212.47397815420442, -35.33481216430664] (3)
19 [171.27442844191543, 246.50949131399298, -38.25554656982422] (3)
20 [172.99871367513407, 264.755263914052, -31.323949813842773] (3)

Array Prototype


[Log] Array (21) (script.js, line 135) // open
0 [207.91913302112198, 339.18073943574285, -0.0011227428913116455] (3)
1 [262.22272369537336, 315.6790097057035, -7.706534385681152] (3)
2 [308.41293480099455, 276.28820316130077, -10.622393608093262] (3)
3 [347.01668255944014, 240.7837170449945, -13.838510513305664] (3)
4 [385.76820423363506, 213.2494035606575, -16.86430549621582] (3)
5 [285.2257910837261, 203.5850884469585, -0.47361719608306885] (3)
6 [300.61533426337064, 153.32295381596623, -1.3539756536483765] (3)
7 [308.49330230669676, 119.2239041379345, -3.227130651473999] (3)
8 [314.67417421653806, 89.3797906612309, -4.940211772918701] (3)
9 [254.5993251168433, 194.66190504826793, -0.2843594551086426] (3)
10 [270.43757566716874, 138.04350673172226, 0.0030900239944458008] (3)
11 [278.0112101361363, 99.29212514352083, -2.168776750564575] (3)
12 [283.3221507261849, 66.76561486496556, -3.729268789291382] (3)
13 [224.13300925539514, 195.6536177301889, -1.5903576612472534] (3)
14 [236.21380967146564, 144.68057841495113, -1.3339240550994873] (3)
15 [241.6790702539609, 108.85300791064084, -2.139784812927246] (3)
16 [246.26401015399733, 78.47617862132017, -2.7211742401123047] (3)
17 [191.7983519089903, 204.9470957102085, -4.2261152267456055] (3)
18 [193.08592618987706, 163.65293829398402, -4.396221160888672] (3)
19 [193.27975226531635, 137.02643000383287, -4.19737434387207] (3)
20 [194.8387192986222, 110.45780029297747, -3.651237964630127] (3)

Array Prototype
*/

